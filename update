#!/usr/bin/env bash

# Add vars
. ./setup_vars.sh

SCRIPT_NAME=$0

usage() {
  cat << EOF >&2
Usage:
  $ update ARGS

Example:
  $ update d pip

ARGS:
  as, asdf:      Update/install asdf
  b,  brew:      Update Homebrew and installed formulaes
  c,  config:    (Re)Create config files symlinks
  d,  dotfiles:  Pull the latest commits from this dotfiles
  n,  nvim:      Update NeoVim (via python pip) and it's installed plugins
  p,  pip:       Update python pip
  z:             Update z script

  a,  all:       Update everything

  h,  help:      This help message
EOF
}

log() {
  echo ""
  echo $1
  echo -e "$1" >> update.log
}

u_dotfiles() {
  log "- Retrieving the latest .dotfiles version..."
  git pull >> update.log
}

u_brew() {
  log "- Updating Homebrew"
  brew update >> update.log
}

u_brew_formulaes() {
  log "- Updating formulaes"
  brew upgrade $(brew list) >> update.log
}

u_asdf() {
  log "- Updating asdf"
  . "${SETUP_FOLDER}/install_update_asdf.sh" >> update.log
}

u_pip() {
  log "- Updating pip"
  pip3 install -U pip >> update.log
}

u_nvim() {
  log "- Updating Neovim"
  pip3 install neovim --upgrade >> update.log
}

u_nvim_plugins() {
  log "- Updating Vim plugins"
  . "${SETUP_FOLDER}/install_update_vim_plugins.sh" >> update.log
}

u_z() {
  log "- Update z"
  . "${SETUP_FOLDER}/install_z.sh" >> update.log
}

u_symlinks() {
  log "- Creating config files symlinks"
  . "${SETUP_FOLDER}/link_config_files.sh" >> update.log
}

u_all() {
  u_dotfiles
  u_brew
  u_brew_formulaes
  u_pip
  u_nvim
  u_nvim_plugins
  u_asdf
  u_z
  u_symlinks
}

parse_args() {
  case $1 in
    "a"|"all")       u_all ;;
    "as"|"asdf")     u_asdf ;;
    "b"|"brew")      u_brew ; u_brew_formulaes ;;
    "c"|"config")    u_symlinks ;;
    "d"|"dotfiles")  u_dotfiles ;;
    "n"|"nvim")      u_nvim ; u_nvim_plugins ;;
    "p"|"pip")       u_pip ;;
    "z")             u_z ;;

    "h"|"help")  usage ;;
    *)           usage ;;
  esac
}

if [[ -z $1 ]]; then
  usage
  echo "  q,  quit:      Exit"

  choice=""
  while [ -z $choice ]; do
    echo -n "Enter the option(s) and press [ENTER]: "
    read choice
  done

  if [[ $choice =~ ^q ]]; then exit 0; fi

  . $SCRIPT_NAME $choice
  exit 0
fi

if [[ $@ =~ h ]]; then
  usage
  exit 0
fi

count=0

while [[ "$#" > 0 ]]; do
  if [[ $count == 0 ]]; then
    log "=================================================="
    log "[ $(date) ] : \$ $SCRIPT_NAME $@"
  fi

  parse_args "$1"

  if [[ $count > 0 ]]; then log "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" ; fi

  count=$(( count + 1 ))

  shift
done
