#!/bin/bash

# Add vars
. ./setup_vars.sh

SCRIPT_NAME=$0

usage() {
  cat << EOF >&2
Usage:
  -b,  --brew:      Update Homebrew and installed formulaes
  -c,  --config:    (Re)Create config files symlinks
  -d,  --dotfiles:  Pull the latest commits from this dotfiles
  -nv, --nvim:      Update NeoVim (via python pip) and it's installed plugins
  -p,  --pip:       Update python pip
  -z:               Update z script

  -a,  --all:       Update everything

  -h,  --help:      This help message
EOF
  exit 1
}

log() {
  echo ""
  echo $1
  echo -e "$1" >> update.log
}

u_dotfiles() {
  log "- Retrieving the latest .dotfiles version..."
  git pull >> update.log
}

u_brew() {
  log "- Updating Homebrew"
  brew update >> update.log
}

u_brew_formulaes() {
  log "- Updating formulaes"
  . "${SETUP_FOLDER}/brew_formulas.sh" >> update.log
}

u_pip() {
  log "- Updating pip"
  pip3 install -U pip >> update.log
}

u_nvim() {
  log "- Updating Neovim"
  pip3 install neovim --upgrade >> update.log
}

u_nvim_plugins() {
  log "- Updating Vim plugins"
  . "${SETUP_FOLDER}/vim_plugins_setup.sh" >> update.log
}

u_z() {
  log "- Update z"
  . "${SETUP_FOLDER}/z_install.sh" >> update.log
}

u_symlinks() {
  log "- Creating config files symlinks"
  . "${SETUP_FOLDER}/link_config_files.sh" >> update.log
}

parse_args() {
  case $1 in
    "-a"|"--all")
      u_dotfiles
      u_brew
      u_brew_formulaes
      u_pip
      u_nvim
      u_nvim_plugins
      u_z
      u_symlinks
      ;;

    "-b"|"--brew")      u_brew ; u_brew_formulaes ;;
    "-c"|"--config")    u_symlinks ;;
    "-d"|"--dotfiles")  u_dotfiles ;;
    "-n"|"--nvim")      u_nvim ; u_nvim_plugins ;;
    "-p"|"--pip")       u_pip ;;
    "-z")               u_z ;;

    "-h"|"--help")  usage ;;
    *)              usage ;;
  esac
}

if [[ -z $1 ]]; then usage; fi

if [[ $@ =~ \-h ]]; then
  parse_args "-h"
  exit 1
fi

count=0

while [[ "$#" > 0 ]]; do
  if [[ $count == 0 ]]; then
    echo -e "\n==================================================" >> update.log
    echo -e "\n[ $(date) ] : \$ $SCRIPT_NAME $@" >> update.log
  fi

  parse_args "$1"

  if [[ $count > 0 ]]; then log "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" ; fi

  count=$(( count + 1 ))

  shift
done
